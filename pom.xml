<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.redhat</groupId>
	<artifactId>customer-service-cache-springboot</artifactId>
	<version>0.0.3-SNAPSHOT</version>

	<name>customer-service-cache</name>
	<description>Cache Demo</description>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>11</java.version>
		<springboot.version>2.5.5</springboot.version>
		<springcloud.version>2020.0.4</springcloud.version>
		<!--springcloud.vault.version>3.0.4</springcloud.vault.version-->
		<springdoc.version>1.5.10</springdoc.version>
		<infinispan.version>12.1.7.Final</infinispan.version>
		<micrometer.version>1.7.3</micrometer.version>
		<lombok.version>1.18.10</lombok.version>
	</properties>

	<repositories>
		<repository>
			<id>redhat-ge</id>
			<name>Red Hat GA Repo</name>
			<url>https://maven.repository.redhat.com/ga/</url>
		</repository>
		<repository>
			<id>redhat-ea</id>
			<name>Red Hat EA Repo</name>
			<url>https://maven.repository.redhat.com/earlyaccess/all/</url>
		</repository>
	</repositories>

	<profiles>
		<!-- Infinispan Embedded -->
		<profile>
			<id>embedded</id>
			<dependencies>
				<!-- Spring Cache Embedded Infinispan -->
				<dependency>
					<groupId>org.infinispan</groupId>
					<artifactId>infinispan-spring-boot-starter-embedded</artifactId>
					<version>${infinispan.version}</version>
				</dependency>
			</dependencies>
			<properties>
				<infinispan.mode>embedded</infinispan.mode>
			</properties>
		</profile>
		<!-- Infinispan Remote -->
		<profile>
			<id>remote</id>
			<dependencies>
				<!-- Spring Cache Remote Infinispan -->
				<dependency>
					<groupId>org.infinispan</groupId>
					<artifactId>infinispan-spring-boot-starter-remote</artifactId>
					<version>${infinispan.version}</version>
				</dependency>
			</dependencies>
			<properties>
				<infinispan.mode>remote</infinispan.mode>
			</properties>
		</profile>

		<!-- Local deployment -->
		<profile>
			<id>host</id>
			<properties>
				<deployment.mode>host</deployment.mode>
			</properties>
			<dependencies>
				<!-- Spring Admin Client -->
				<dependency>
					<groupId>de.codecentric</groupId>
					<artifactId>spring-boot-admin-starter-client</artifactId>
					<version>2.5.1</version>
				</dependency>
				<!--dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency-->

				<!-- JPA Driver-->
				<dependency>
					<groupId>org.hsqldb</groupId>
					<artifactId>hsqldb</artifactId>
					<version>2.6.0</version>
				</dependency>
			</dependencies>
		</profile>

		<!-- Deployment on k8s -->
		<profile>
			<id>kubernetes</id>
			<properties>
				<jkube.domain>minikube.cloud</jkube.domain>
				<jkube.createExternalUrls>true</jkube.createExternalUrls>
				<!-- Pre k8s 1.16 -->
				<!--jkube.enricher.jkube-ingress.targetApiVersion>extensions/v1beta1</jkube.enricher.jkube-ingress.targetApiVersion-->
				<!-- After k8s 1.16 -->
				<jkube.enricher.jkube-ingress.targetApiVersion>networking.k8s.io/v1</jkube.enricher.jkube-ingress.targetApiVersion>
				<deployment.mode>kubernetes</deployment.mode>
			</properties>
			<dependencies>
				<!-- Spring Cloud Kubernetes -->
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-starter-kubernetes-fabric8-config</artifactId>
				</dependency>

				<!-- JDBC Driver -->
				<dependency>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
					<version>42.2.23</version>
				</dependency>

			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.eclipse.jkube</groupId>
						<artifactId>kubernetes-maven-plugin</artifactId>
						<version>1.4.0</version>
						<configuration>
							<images>
								<image>
									<name>quay.io/rgordill/%a:%t</name>
									<!--registry>quay.io</registry-->
									<build>
										<from>quay.io/jkube/jkube-java-binary-s2i:0.0.9</from>
										<assembly>
											<targetDir>/deployments</targetDir>
										</assembly>
									</build>
								</image>
							</images>
							<resources>
								<annotations>
									<ingress>
										<property>
											<name>kubernetes.io/ingress.class</name>
											<value>nginx</value>
										</property>
									</ingress>
								</annotations>
								<replicas>2</replicas>
								<serviceAccount>${project.artifactId}</serviceAccount>
								<volumes>
									<volume>
										<name>config-volume</name>
										<type>configMap</type>
										<configMapName>${project.artifactId}-config</configMapName>
										<mounts>
											<mount>/opt/jboss/etc</mount>
										</mounts>
									</volume>
								</volumes>
								<services>
									<service>
										<name>${project.artifactId}</name>
										<ports>
											<port>
												<name>http</name>
												<protocol>TCP</protocol>
												<port>8080</port>
												<targetPort>8080</targetPort>
											</port>
										</ports>
										<expose>true</expose>
									</service>
									<service>
										<name>${project.artifactId}-ping</name>
										<headless>true</headless>
										<ports>
											<port>
												<name>${project.artifactId}-ping</name>
												<protocol>TCP</protocol>
												<port>7800</port>
												<targetPort>7800</targetPort>
											</port>
										</ports>
									</service>
								</services>
								<ingress>
									<ingressRules>
										<ingressRule>
											<host>customer-service-cache.${jkube.domain}</host>
											<paths>
												<path>
													<pathType>Prefix</pathType>
													<path>/</path>
													<serviceName>${project.artifactId}</serviceName>
													<servicePort>8080</servicePort>
												</path>
											</paths>
										</ingressRule>
									</ingressRules>
								</ingress>
								<configMap>
									<name>${project.artifactId}-config</name>
									<entries>
										<entry>
											<file>src/main/resources/bootstrap-${deployment.mode}.properties</file>
										</entry>
										<entry>
											<file>src/main/resources/application.properties</file>
										</entry>
										<entry>
											<file>src/main/resources/application-${deployment.mode}.properties</file>
										</entry>
										<entry>
											<file>src/main/resources/application-${infinispan.mode}.properties</file>
										</entry>
										<entry>
											<file>src/main/resources/cache-${deployment.mode}.xml</file>
										</entry>
									</entries>
								</configMap>
								<env>
									<!-- disable jolokia -->
									<AB_JOLOKIA_OFF>true</AB_JOLOKIA_OFF>
									<JAVA_OPTIONS>-Djgroups.dns.query=${project.artifactId}-ping</JAVA_OPTIONS>
									<JAVA_ARGS>--spring.profiles.active=${deployment.mode},${infinispan.mode} --spring.application.name=customer-service-cache --spring.cloud.kubernetes.config.name=customer-service-cache-config --spring.cloud.kuberentes.config.paths=/opt/jboss/etc --spring.cloud.kubernetes.config.enableApi=false</JAVA_ARGS>
								</env>
							</resources>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencyManagement>
		<dependencies>
			<!-- Lock Infinispan version, instead of the one included by springboot itself -->
			<dependency>
				<groupId>org.infinispan</groupId>
				<artifactId>infinispan-bom</artifactId>
				<version>${infinispan.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${springboot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${springcloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			  </dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>

		<!-- Spring Cloud Vault for Databases -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-vault-config-databases</artifactId>
		</dependency>

		<!-- ProtoStream implementation and relatives -->
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-remote-query-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.infinispan.protostream</groupId>
			<artifactId>protostream-processor</artifactId>
		</dependency>

		<!-- cache stores -->
		<!--dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cachestore-rocksdb</artifactId>
		</dependency-->
		<!--dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cachestore-jdbc</artifactId>
		</dependency-->

		<!-- spring data jpa-->
		<!--dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency-->

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-couchbase</artifactId>
		</dependency>

		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- OpenAPI -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>

		<!-- Monitoring through Actuator -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
			<version>${micrometer.version}</version>
		</dependency>
	</dependencies>

	<build>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>${java.version}</release>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<addMavenDescriptor>false</addMavenDescriptor>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${springboot.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<profiles>
						<profile>${infinispan.mode}</profile>
						<profile>${deployment.mode}</profile>
					</profiles>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>